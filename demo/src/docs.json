{
  "Ng2vPanel": {
    "fileName": "src/accordion/accordion.ts",
    "className": "Ng2vPanel",
    "selector": "ng2v-panel",
    "exportAs": "ng2vPanel",
    "description": "",
    "inputs": [
      {
        "name": "disabled",
        "defaultValue": "false",
        "type": "boolean",
        "description": "A flag determining whether the panel is disabled or not.\nWhen disabled, the panel cannot be toggled."
      },
      {
        "name": "id",
        "type": "string",
        "description": "An optional id for the panel. The id should be unique.\nIf not provided, it will be auto-generated."
      },
      {
        "name": "open",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Defines whether the panel should be open initially."
      },
      {
        "name": "title",
        "type": "string",
        "description": "The title for the panel."
      }
    ],
    "outputs": []
  },
  "Ng2vAccordion": {
    "fileName": "src/accordion/accordion.ts",
    "className": "Ng2vAccordion",
    "selector": "ng2v-accordion",
    "description": "",
    "inputs": [
      {
        "name": "closeOthers",
        "type": "boolean",
        "description": "A flag determining whether the other panels should be closed\nwhen a panel is opened."
      }
    ],
    "outputs": []
  },
  "Ng2vAlert": {
    "fileName": "src/alert/alert.ts",
    "className": "Ng2vAlert",
    "selector": "ngb-alert",
    "description": "Alerts can be used to provide feedback messages.",
    "inputs": [
      {
        "name": "dismissible",
        "defaultValue": "true",
        "type": "boolean",
        "description": "A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\nform of a cross) will be displayed."
      },
      {
        "name": "type",
        "defaultValue": "warning",
        "type": "string",
        "description": "Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\"."
      }
    ],
    "outputs": [
      {
        "name": "close",
        "description": "An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts."
      }
    ]
  },
  "Ng2vRadioGroup": {
    "fileName": "src/buttons/radio.ts",
    "className": "Ng2vRadioGroup",
    "selector": "[ngbRadioGroup][ngModel]",
    "description": "Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\nspecified via ngModel.",
    "inputs": [],
    "outputs": []
  },
  "Ng2vRadioLabel": {
    "fileName": "src/buttons/radio.ts",
    "className": "Ng2vRadioLabel",
    "selector": "label.btn",
    "description": "",
    "inputs": [
      {
        "name": "checked",
        "type": "boolean",
        "description": ""
      }
    ],
    "outputs": []
  },
  "Ng2vRadio": {
    "fileName": "src/buttons/radio.ts",
    "className": "Ng2vRadio",
    "selector": "input[type=radio]",
    "description": "Marks an input of type \"radio\" as part of the Ng2vRadioGroup.",
    "inputs": [
      {
        "name": "value",
        "type": "any",
        "description": "You can specify model value of a given radio by binding to the value property."
      }
    ],
    "outputs": []
  },
  "Ng2vSlide": {
    "fileName": "src/carousel/carousel.ts",
    "className": "Ng2vSlide",
    "selector": "template[ngbSlide]",
    "description": "",
    "inputs": [
      {
        "name": "id",
        "type": "string",
        "description": ""
      }
    ],
    "outputs": []
  },
  "Ng2vCarousel": {
    "fileName": "src/carousel/carousel.ts",
    "className": "Ng2vCarousel",
    "selector": "ngb-carousel",
    "exportAs": "ngbCarousel",
    "description": "",
    "inputs": [
      {
        "name": "activeId",
        "type": "string",
        "description": ""
      },
      {
        "name": "interval",
        "defaultValue": "5000",
        "type": "number",
        "description": ""
      },
      {
        "name": "keyboard",
        "defaultValue": "true",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "wrap",
        "defaultValue": "true",
        "type": "boolean",
        "description": ""
      }
    ],
    "outputs": []
  },
  "Ng2vCollapse": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/collapse/collapse.ts",
    "className": "Ng2vCollapse",
    "selector": "[ngbCollapse]",
    "exportAs": "ngbCollapse",
    "description": "The Ng2vCollapse directive provides a simple way to hide and show an element with animations.",
    "inputs": [
      {
        "name": "ngbCollapse",
        "defaultValue": "false",
        "type": "boolean",
        "description": "A flag indicating collapsed (true) or open (false) state."
      }
    ],
    "outputs": []
  },
  "Ng2vDropdown": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/dropdown/dropdown.ts",
    "className": "Ng2vDropdown",
    "selector": "[ngbDropdown]",
    "exportAs": "ngbDropdown",
    "description": "Transforms a node into a dropdown.",
    "inputs": [
      {
        "name": "autoClose",
        "defaultValue": "true",
        "type": "boolean",
        "description": "Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC."
      },
      {
        "name": "open",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Defines whether or not the dropdown-menu is open initially."
      }
    ],
    "outputs": [
      {
        "name": "openChange",
        "description": "An event fired when the dropdown is opened or closed.\nEvent's payload equals whether dropdown is open."
      }
    ]
  },
  "Ng2vDropdownToggle": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/dropdown/dropdown.ts",
    "className": "Ng2vDropdownToggle",
    "selector": "[ngbDropdownToggle]",
    "description": "Allows the dropdown to be toggled via click. This directive is optional.",
    "inputs": [],
    "outputs": []
  },
  "Ng2vModalBackdrop": {
    "fileName": "src/modal/modal_backdrop.ts",
    "className": "Ng2vModalBackdrop",
    "selector": "ngb-modal-backdrop",
    "description": "",
    "inputs": [],
    "outputs": []
  },
  "Ng2vModalWindow": {
    "fileName": "src/modal/modal_window.ts",
    "className": "Ng2vModalWindow",
    "selector": "ngb-modal-window",
    "description": "",
    "inputs": [
      {
        "name": "backdrop",
        "defaultValue": "true",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "keyboard",
        "defaultValue": "true",
        "type": "boolean",
        "description": ""
      },
      {
        "name": "size",
        "type": "string",
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "close",
        "description": ""
      },
      {
        "name": "dismiss",
        "description": ""
      }
    ]
  },
  "Ng2vPager": {
    "fileName": "src/pager/pager.ts",
    "className": "Ng2vPager",
    "selector": "ngb-pager",
    "description": "",
    "inputs": [
      {
        "name": "alignLinks",
        "defaultValue": "false",
        "type": "boolean",
        "description": "A flag for determining whether links need to be aligned."
      },
      {
        "name": "noOfPages",
        "defaultValue": "0",
        "type": "number",
        "description": "Number of pages present."
      },
      {
        "name": "page",
        "defaultValue": "0",
        "type": "number",
        "description": "Current page."
      }
    ],
    "outputs": [
      {
        "name": "pageChange",
        "description": "An event fired when the page is changed.\nEvent's payload equals the current page."
      }
    ]
  },
  "Ng2vPagination": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/pagination/pagination.ts",
    "className": "Ng2vPagination",
    "selector": "ngb-pagination",
    "description": "",
    "inputs": [
      {
        "name": "boundaryLinks",
        "type": "boolean",
        "description": "Whether to show the \"First\" and \"Last\" page links"
      },
      {
        "name": "collectionSize",
        "type": "number | string",
        "description": "Number of items in collection."
      },
      {
        "name": "page",
        "type": "number | string",
        "description": "Current page."
      },
      {
        "name": "pageSize",
        "type": "number | string",
        "description": "Number of items per page."
      }
    ],
    "outputs": [
      {
        "name": "pageChange",
        "description": "An event fired when the page is changed.\nEvent's payload equals the current page."
      }
    ]
  },
  "Ng2vPopoverWindow": {
    "fileName": "src/popover/popover.ts",
    "className": "Ng2vPopoverWindow",
    "selector": "ngb-popover-window",
    "description": "",
    "inputs": [
      {
        "name": "placement",
        "defaultValue": "top",
        "type": "string",
        "description": ""
      },
      {
        "name": "title",
        "type": "string",
        "description": ""
      }
    ],
    "outputs": []
  },
  "Ng2vProgressbar": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/progressbar/progressbar.ts",
    "className": "Ng2vProgressbar",
    "selector": "ngb-progressbar",
    "description": "Directive that can be used to provide feedback on the progress of a workflow or an action.",
    "inputs": [
      {
        "name": "animated",
        "type": "boolean | string",
        "description": "A flag indicating if a progress bar should be animated when the value changes. Takes effect only for browsers\nsupporting CSS3 animations."
      },
      {
        "name": "max",
        "defaultValue": "100",
        "type": "number",
        "description": "Maximal value to be displayed in the progressbar."
      },
      {
        "name": "striped",
        "type": "boolean | string",
        "description": "A flag indicating if a progress bar should be displayed as striped."
      },
      {
        "name": "type",
        "type": "string",
        "description": "Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\"."
      },
      {
        "name": "value",
        "type": "number",
        "description": "Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value."
      }
    ],
    "outputs": []
  },
  "Ng2vRating": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/rating/rating.ts",
    "className": "Ng2vRating",
    "selector": "ngb-rating",
    "exportAs": "ngbRating",
    "description": "",
    "inputs": [
      {
        "name": "max",
        "defaultValue": "10",
        "type": "number",
        "description": ""
      },
      {
        "name": "rate",
        "type": "number",
        "description": ""
      },
      {
        "name": "readonly",
        "type": "boolean",
        "description": ""
      }
    ],
    "outputs": [
      {
        "name": "hover",
        "description": ""
      },
      {
        "name": "leave",
        "description": ""
      },
      {
        "name": "rateChange",
        "description": ""
      }
    ]
  },
  "Ng2vTabTitle": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/tabset/tabset.ts",
    "className": "Ng2vTabTitle",
    "selector": "template[ngbTabTitle]",
    "description": "",
    "inputs": [],
    "outputs": []
  },
  "Ng2vTabContent": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/tabset/tabset.ts",
    "className": "Ng2vTabContent",
    "selector": "template[ngbTabContent]",
    "description": "",
    "inputs": [],
    "outputs": []
  },
  "Ng2vTab": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/tabset/tabset.ts",
    "className": "Ng2vTab",
    "selector": "ngb-tab",
    "description": "A directive representing an individual tab.",
    "inputs": [
      {
        "name": "disabled",
        "defaultValue": "false",
        "type": "boolean",
        "description": "Allows toggling disabled state of a given state. Disabled tabs can't be selected."
      },
      {
        "name": "id",
        "type": "string",
        "description": "Unique tab identifier. Must be unique for the entire document for proper accessibility support."
      },
      {
        "name": "title",
        "type": "string",
        "description": "Simple (string only) title. Use the \"Ng2vTabTitle\" directive for more complex use-cases."
      }
    ],
    "outputs": []
  },
  "Ng2vTabset": {
    "fileName": "/Users/wesleycho/repositories/ng-bootstrap/src/tabset/tabset.ts",
    "className": "Ng2vTabset",
    "selector": "ngb-tabset",
    "exportAs": "ngbTabset",
    "description": "A component that makes it easy to create tabbed interface.",
    "inputs": [
      {
        "name": "activeId",
        "type": "string",
        "description": "An identifier of a tab that should be selected (active)."
      },
      {
        "name": "type",
        "defaultValue": "tabs",
        "type": "string",
        "description": "Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'."
      }
    ],
    "outputs": []
  },
  "Ng2vTooltipWindow": {
    "fileName": "src/tooltip/tooltip.ts",
    "className": "Ng2vTooltipWindow",
    "selector": "ngb-tooltip-window",
    "description": "",
    "inputs": [
      {
        "name": "placement",
        "defaultValue": "top",
        "type": "string",
        "description": ""
      }
    ],
    "outputs": []
  }
}